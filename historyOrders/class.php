<?php
class historyOrders extends CBitrixComponent
{
	/**
	 * Проверяют наличие пользователя
	 * @param  arParams['id']
	 * @return bool
	 */
	private function checkUser()
	{
		$data = \Bitrix\Main\UserTable::getByPrimary($this->arParams['id'])->fetchObject();
		if($data)
		{
			$this->arResult['status'] = 'success';
			$this->arResult['dataObj'] = $data;
			return true;
		}
		$this->arResult['error']  = "Invalid user id {$this->arParams['id']}";
		$this->arResult['status'] = 'fail';
		return false;
	}
	/**
	 * Проверяют наличие пользователя
	 * @param  $order
	 * @return array
	 */
	private function getOrder($order)
	{
		$order = \Bitrix\Sale\Order::load($order);

		return
			[
				'id'            => $order->getField("ID"),
				'price'         => $order->getField("PRICE"),
				'payed'         => $order->getField("PAYED"),
				'status'        => $order->getField("STATUS_ID"),
				'dataPayed'     => $order->getField("DATE_PAYED"),
				'comment'       => $order->getField("USER_DESCRIPTION"),
				'priceDelevery' => $order->getField("PRICE_DELIVERY"),
			];
	}
	private function getHistoryOrders()
	{
		if($this->checkUser() and CModule::IncludeModule('sale'))
		{
			$ordersItems = \Bitrix\Sale\Internals\OrderTable::getList(
				[
					'filter' => ['USER_ID' => $this->arParams['id']],
					'select' => ['ID'],
				])->fetchAll();
			$ordersItems = array_chunk($ordersItems,$this->arParams['onThePage']);
			$this->arResult['totalPages'] = sizeof($ordersItems);



			if($this->arParams['page']-1 > $this->arResult['totalPages']-1)
			{
				$this->arResult['error']  = "Invalid page {$this->arParams['page']}";
				$this->arResult['status'] = 'fail';
			}
			else
			{
				$this->arResult['data'] = $ordersItems[$this->arParams['page']-1];
			}

		}
		unset($this->arResult['dataObj']);
	}
	public function executeComponent()
	{

		if($this->arParams['method'] == 'GET')
		{
			$this->getHistoryOrders();
		}
		else
			$this->arResult['error'] = "Invalid request {$this->arParams['method']}";

		if ($this->arParams['json'])
			$this->arResult = json_encode($this->arResult);

		$this::IncludeComponentTemplate(); // TODO: Change the autogenerated stub
	}
}