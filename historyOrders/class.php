<?php
class historyOrders extends CBitrixComponent
{
	/**
	 * Проверяют наличие пользователя
	 * @param  arParams['id']
	 * @return bool
	 */
	private function checkUser()
	{
		$data = \Bitrix\Main\UserTable::getByPrimary($this->arParams['id'])->fetchObject();
		if($data)
		{
			$this->arResult['status'] = 'success';
			$this->arResult['dataObj'] = $data;
			return true;
		}
		$this->arResult['error']  = "Invalid user id {$this->arParams['id']}";
		$this->arResult['status'] = 'fail';
		return false;
	}
	/**
	 * Получают товары заказа
	 * @param  $arResult['data']
	 * @return void
	 */
	private function getOrderItems()
	{
		foreach ($this->arResult['data'] as &$data)
		{
			$products = \Bitrix\Sale\Internals\BasketTable::getList(
				[
					'filter' => ['ORDER_ID' => $data['ID']],
					'select' => ['ID','NAME', 'PRICE', 'QUANTITY'],
					'cache'  => [
						'ttl'         => 3600,
						'cache_joins' => true,
					],
				]);

			foreach ($products->fetchCollection() as $item)
				$data['products'][] =
					[
						'id'    => $item->getId(),
						'name'  => $item->getName(),
						'cnt'   => $item->getQuantity(),
						'price' => $item->getPrice(),
					];
			$data['PAY_SYSTEM_ID'] = \Bitrix\Sale\Delivery\Services\Table::getList(
				[
					'filter' => ['ACTIVE' => 'Y','ID' => $data['PAY_SYSTEM_ID'],
					'cache'  =>
						[
							'ttl'         => 3600,
							'cache_joins' => true,
						],
					],
			])->fetchObject()->collectValues();

			unset($data['ID']);
		}
	}
	/**
	 * Проверяют наличие пользователя
	 * @param  $arResult['data']
	 * @return void
	 */
	private function getHistoryOrders()
	{
		if($this->checkUser() and CModule::IncludeModule('sale'))
		{
			$ordersItems = \Bitrix\Sale\Internals\OrderTable::getList(
				[
					'filter' => ['USER_ID' => $this->arParams['id']],
					'select' => ['ID', 'DELIVERY_ID','PRICE_DELIVERY','PRICE','PAY_SYSTEM_ID',],
					'cache'  => [
						'ttl'         => 3600,
						'cache_joins' => true,
					],
				]);
			$ordersItemsPagen = $ordersItems->fetchAll();

			$ordersItemsPagen = array_chunk($ordersItemsPagen,$this->arParams['onThePage']);
			$this->arResult['totalPages'] = sizeof($ordersItemsPagen);

			if($this->arParams['page']-1 > $this->arResult['totalPages']-1)
			{
				$this->arResult['error']  = "Invalid page {$this->arParams['page']}";
				$this->arResult['status'] = 'fail';
			}
			else
			{
				$this->arResult['data'] = $ordersItemsPagen[$this->arParams['page']-1];
				$this->getOrderItems();
			}

		}
		unset($this->arResult['dataObj']);
	}

	public function executeComponent()
	{

		if($this->arParams['method'] == 'GET')
		{
			$this->getHistoryOrders();
		}
		else
			$this->arResult['error'] = "Invalid request {$this->arParams['method']}";

		if ($this->arParams['json'])
			$this->arResult = json_encode($this->arResult);

		$this::IncludeComponentTemplate(); // TODO: Change the autogenerated stub
	}
}